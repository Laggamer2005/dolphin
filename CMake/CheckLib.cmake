macro(check_lib var pc lib)
  set(_is_required 0)
  set(_is_quiet 0)
  set(_arg_list ${ARGN})

  # Extract and remove REQUIRED and QUIET keywords from the argument list
  foreach(_arg ${ARGN})
    if(_arg STREQUAL "REQUIRED")
      set(_is_required 1)
      list(REMOVE_ITEM _arg_list "REQUIRED")
    elseif(_arg STREQUAL "QUIET")
      set(_is_quiet 1)
      list(REMOVE_ITEM _arg_list "QUIET")
    endif()
  endforeach()

  # Use pkg-config if available and not already found
  if(PKG_CONFIG_FOUND AND NOT ${var}_FOUND)
    pkg_search_module(${var} QUIET ${pc})
  endif()

  # If found using pkg-config, set include directories
  if(${var}_FOUND)
    if(${var}_INCLUDE_DIRS)
      include_directories(${${var}_INCLUDE_DIRS})
    endif()
    if(${var}_INCLUDE)
      include_directories(${${var}_INCLUDE})
    endif()
    _internal_message("${lib} found")
  else()
    # Use find_library and find_path if not found using pkg-config
    find_library(${var} ${lib})
    find_path(${var}_INCLUDE ${_arg_list})

    if(${var} AND ${var}_INCLUDE)
      include_directories(${${var}_INCLUDE})
      _internal_message("${lib} found")
      set(${var}_FOUND 1 CACHE INTERNAL "")
    else()
      if(_is_required)
        message(FATAL_ERROR "${lib} is required but not found")
      else()
        _internal_message("${lib} not found")
      endif()
    endif()
  endif()
endmacro()
